@using System.Activities.Expressions
@model IEnumerable<Vidly.Models.Customer>

+@*


    Note: I've set the model for this view to IEnumerable<Customer>.


    +    This is a simple interface implemented by the list class. Since


    +    in this view we only want to iterate over this list, and we don't


    +    need any of the operations in the List class (eg Add, Remove, etc),


    +    it's better to use the IEnumerable interface, which allows use to


    +    iterate over the list. If in the future, we replace the List with a


    +    different data structure, as long as it is enumerable, our view code


    +    will remain unchanged.


    +*@

 

@{
    ViewBag.Title = "Customers";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



@{
    // Render classes dynamically
    var className = Model.Count() > 1 ? "growing" : null; // set the value of className

    <h2> <b>Customers</b>  </h2>
}



@if (!Model.Any())
{
    <h2>There are no customers at this time.</h2>
}
else
{

    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Customer</th>
                <th>Discount Rate</th>
            </tr>
        </thead>
            @foreach (var customer in Model)
            {
                <tr>
                   
                    <td> @Html.ActionLink(@customer.Name, "Details", "Customers", new { Id = customer.Id}, null ) </td>
                    <td> @customer.MembershipType.DiscountRate%</td>
                </tr>
            }
        
        <tfoot class="@className">We are growing, our current customer count is <b>  @Model.Count() </b></tfoot>

    </table>
}